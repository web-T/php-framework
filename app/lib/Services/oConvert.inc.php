<?php

/**
 * web-T::CMS class converts strings (sometimes it is work better then iconv)
 *
 * Date: 27.02.2007
 * Time: 08:40
 * @version 1.3
 * @author goshi
 * @package web-T[share]
 *
 * Changelog:
 *    1.3   20.04.13/goshi  refactoring
 *    1.2	08.03.09/goshi	using in most cases iconv
 *	  1.1	27.11.08/goshi	change all codepages to lowercase
 *    1.0   18.12.2012/goshi
 */


namespace webtFramework\Services;


/**
 * Class determine simply field type object
 * @package web-T[share]
 */

class oConvert{

    /**
     * possible codepages
     * @var array
     */
    protected  $_codepages = array(
        'w'		=>	'windows-1251',
        'k'		=>	'koi8-r',
        'ku'		=>	'koi8-u',
        'u'		=>	'utf-8',
        'i'		=>	'iso8859-5',
        'a'		=>	'x-cp866',
        //'d'		=>	'X-CP866',
        'm'		=>	'x-mac-cyrillic'
    );


    /*var $__src_win_utf8 = array(
    128,129,130,131,132,133,134,135,136,137,138,139,140,141,
    142,143,144,145,146,147,148,149,150,151,153,154,155,156,
    157,158,159,160,161,162,163,164,165,166,167,168,169,170,
    171,172,173,174,175,176,177,178,179,180,181,182,183,184,
    185,186,187,188,189,190,191,192,193,194,195,196,197,198,
    199,200,201,202,203,204,205,206,207,208,209,210,211,212,
    213,214,215,216,217,218,219,220,221,222,223,224,225,226,
    227,228,229,230,231,232,233,234,235,236,237,238,239,240,
    241,242,243,244,245,246,247,248,249,250,251,252,253,254,
    255,32);

    var $__win_utf8 = array(
    1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,
    1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,
    8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,
    1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,
    1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,
    1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,
    1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,
    1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,
    1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,
    1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,
    1100,1101,1102,1103,32);

    function utf8cp1251($s, $from, $to) {
        $len = strlen($s);
        $pos = 0;
        $newlen = 0;
        $ret = '';

        while ($pos<$len) {
             if (ord($s[$pos]) < 0x80) {
                $ret .= $s[$pos];
                $pos++;
            } else {
                if ( ((ord($s[$pos]) & 0xE0) == 0xC0) && ($pos < ($len-1)) ) {
                    $c = ( (ord($s[$pos]) & 0x1F) << 6 ) + ( ord($s[$pos+1]) & 0x3F)
    ;
                    $pos+=2;
                } elseif ( ((ord($s[$pos]) & 0xF0) == 0xE0) && ($pos<($len-2))) {
                    $c = (((ord($s[$pos])) & 0x0F) << 12) + ((ord($s[$pos+1]) & 0x3F
    ) << 6) + (ord($s[$pos+2]) & 0x3F);
                    $pos+=3;

                } else {
                    $c = 0;
                    $pos+=4;
                }
                for ($i=0; $i<128; $i++) {
                    if ($c == $from[$i]) {
                        $c = $to[$i];
                        break;
                    }
                }
                $ret .= chr($c);
            }
        }
        if ((ord($s[0]) == 0xEF)) {
            $ret = substr($ret, 1, strlen($ret));
        }
        return $ret;


    }


     /**
         * Convert from UCS-2BE decimal to $toEnc.
         */
    /*  function decUcs2Decode($code, $toEnc)
   {
       if ($code < 128) return chr($code);
       if (isset($this->_encTables[$toEnc])) {
           $p = array_search($code, $this->_encTables[$toEnc]);
           if ($p !== false) return chr(128 + $p);
       }
       return "";
   } */


    /**
     * UCS-2BE -> 1-byte encodings (from #128).
     */
    /*    var $_encTables = array(
            'windows-1251' => array(
                0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
                0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
                0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
                0x0098, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
                0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
                0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
                0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
                0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
                0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
                0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
                0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
                0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
                0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
                0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
                0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
                0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
            ),
            'koi8-r' => array(
                0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524,
                0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
                0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219, 0x221A, 0x2248,
                0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
                0x2550, 0x2551, 0x2552, 0x0451, 0x2553, 0x2554, 0x2555, 0x2556,
                0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x255C, 0x255d, 0x255E,
                0x255F, 0x2560, 0x2561, 0x0401, 0x2562, 0x2563, 0x2564, 0x2565,
                0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x256B, 0x256C, 0x00A9,
                0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
                0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043d, 0x043E,
                0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432,
                0x044C, 0x044B, 0x0437, 0x0448, 0x044d, 0x0449, 0x0447, 0x044A,
                0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
                0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041d, 0x041E,
                0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412,
                0x042C, 0x042B, 0x0417, 0x0428, 0x042d, 0x0429, 0x0427, 0x042A
            ),
        );



    }*/


    /*
    Sorry for my English

    100% worked function for convertion string to utf-8.
    In this implementation support main cyrilic encodings (cp1251, koi8-r, iso8859-5, cp866, mac)
    For supporting another codepages - just add needed codepage in $recode array
    (codes in UCS-4. Add just second part of codetable).
    Second argument for this function for cyrilic codepages -
    like in convert_cyr_string function ('k','w', 'i', 'a','d','m')
    Writed in accordance with rfc2279

    Created by Andrey A Sidorenko aka sidor


    ADDED bY goshi: koi8-u (ku)
    */

    /**
     * recode variable
     * @var array
     */
    protected $_recode = array(

        'k' => array(
            0x2500,0x2502,0x250c,0x2510,0x2514,0x2518,0x251c,0x2524,
            0x252c,0x2534,0x253c,0x2580,0x2584,0x2588,0x258c,0x2590,
            0x2591,0x2592,0x2593,0x2320,0x25a0,0x2219,0x221a,0x2248,
            0x2264,0x2265,0x00a0,0x2321,0x00b0,0x00b2,0x00b7,0x00f7,
            0x2550,0x2551,0x2552,0x0451,0x2553,0x2554,0x2555,0x2556,
            0x2557,0x2558,0x2559,0x255a,0x255b,0x255c,0x255d,0x255e,
            0x255f,0x2560,0x2561,0x0401,0x2562,0x2563,0x2564,0x2565,
            0x2566,0x2567,0x2568,0x2569,0x256a,0x256b,0x256c,0x00a9,
            0x044e,0x0430,0x0431,0x0446,0x0434,0x0435,0x0444,0x0433,
            0x0445,0x0438,0x0439,0x043a,0x043b,0x043c,0x043d,0x043e,
            0x043f,0x044f,0x0440,0x0441,0x0442,0x0443,0x0436,0x0432,
            0x044c,0x044b,0x0437,0x0448,0x044d,0x0449,0x0447,0x044a,
            0x042e,0x0410,0x0411,0x0426,0x0414,0x0415,0x0424,0x0413,
            0x0425,0x0418,0x0419,0x041a,0x041b,0x041c,0x041d,0x041e,
            0x041f,0x042f,0x0420,0x0421,0x0422,0x0423,0x0416,0x0412,
            0x042c,0x042b,0x0417,0x0428,0x042d,0x0429,0x0427,0x042a
        ),

        'ku' => array(
            0x2500,0x2502,0x250c,0x2510,0x2514,0x2518,0x251c,0x2524,
            0x252c,0x2534,0x253c,0x2580,0x2584,0x2588,0x258c,0x2590,
            0x2591,0x2592,0x2593,0x2320,0x25a0,0x2219,0x221a,0x2248,
            0x2264,0x2265,0x00a0,0x2321,0x00b0,0x00b2,0x00b7,0x00f7,
            0x2550,0x2551,0x2552,0x0451,0x0454,0x2554,0x0456,0x0457,
            0x2557,0x2558,0x2559,0x255a,0x255b,0x0491,0x255d,0x255e,
            0x255f,0x2560,0x2561,0x0401,0x0404,0x2563,0x0406,0x0407,
            0x2566,0x2567,0x2568,0x2569,0x256a,0x0490,0x256c,0x00a9,
            0x044e,0x0430,0x0431,0x0446,0x0434,0x0435,0x0444,0x0433,
            0x0445,0x0438,0x0439,0x043a,0x043b,0x043c,0x043d,0x043e,
            0x043f,0x044f,0x0440,0x0441,0x0442,0x0443,0x0436,0x0432,
            0x044c,0x044b,0x0437,0x0448,0x044d,0x0449,0x0447,0x044a,
            0x042e,0x0410,0x0411,0x0426,0x0414,0x0415,0x0424,0x0413,
            0x0425,0x0418,0x0419,0x041a,0x041b,0x041c,0x041d,0x041e,
            0x041f,0x042f,0x0420,0x0421,0x0422,0x0423,0x0416,0x0412,
            0x042c,0x042b,0x0417,0x0428,0x042d,0x0429,0x0427,0x042a
        ),

        'w' => array(
            0x0402,0x0403,0x201A,0x0453,0x201E,0x2026,0x2020,0x2021,
            0x20AC,0x2030,0x0409,0x2039,0x040A,0x040C,0x040B,0x040F,
            0x0452,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
            0x0000,0x2122,0x0459,0x203A,0x045A,0x045C,0x045B,0x045F,
            0x00A0,0x040E,0x045E,0x0408,0x00A4,0x0490,0x00A6,0x00A7,
            0x0401,0x00A9,0x0404,0x00AB,0x00AC,0x00AD,0x00AE,0x0407,
            0x00B0,0x00B1,0x0406,0x0456,0x0491,0x00B5,0x00B6,0x00B7,
            0x0451,0x2116,0x0454,0x00BB,0x0458,0x0405,0x0455,0x0457,
            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
            0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
            0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
            0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
            0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F
        ),

        'i' => array(
            0x0080,0x0081,0x0082,0x0083,0x0084,0x0085,0x0086,0x0087,
            0x0088,0x0089,0x008A,0x008B,0x008C,0x008D,0x008E,0x008F,
            0x0090,0x0091,0x0092,0x0093,0x0094,0x0095,0x0096,0x0097,
            0x0098,0x0099,0x009A,0x009B,0x009C,0x009D,0x009E,0x009F,
            0x00A0,0x0401,0x0402,0x0403,0x0404,0x0405,0x0406,0x0407,
            0x0408,0x0409,0x040A,0x040B,0x040C,0x00AD,0x040E,0x040F,
            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
            0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
            0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
            0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
            0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
            0x2116,0x0451,0x0452,0x0453,0x0454,0x0455,0x0456,0x0457,
            0x0458,0x0459,0x045A,0x045B,0x045C,0x00A7,0x045E,0x045F
        ),

        'a' => array(
            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
            0x0418,0x0419,0x041a,0x041b,0x041c,0x041d,0x041e,0x041f,
            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
            0x0428,0x0429,0x042a,0x042b,0x042c,0x042d,0x042e,0x042f,
            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
            0x0438,0x0439,0x043a,0x043b,0x043c,0x043d,0x043e,0x043f,
            0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,
            0x2555,0x2563,0x2551,0x2557,0x255d,0x255c,0x255b,0x2510,
            0x2514,0x2534,0x252c,0x251c,0x2500,0x253c,0x255e,0x255f,
            0x255a,0x2554,0x2569,0x2566,0x2560,0x2550,0x256c,0x2567,
            0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256b,
            0x256a,0x2518,0x250c,0x2588,0x2584,0x258c,0x2590,0x2580,
            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
            0x0448,0x0449,0x044a,0x044b,0x044c,0x044d,0x044e,0x044f,
            0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040e,0x045e,
            0x00b0,0x2219,0x00b7,0x221a,0x2116,0x00a4,0x25a0,0x00a0
        ),

        'm' => array(
            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
            0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
            0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
            0x2020,0x00B0,0x00A2,0x00A3,0x00A7,0x2022,0x00B6,0x0406,
            0x00AE,0x00A9,0x2122,0x0402,0x0452,0x2260,0x0403,0x0453,
            0x221E,0x00B1,0x2264,0x2265,0x0456,0x00B5,0x2202,0x0408,
            0x0404,0x0454,0x0407,0x0457,0x0409,0x0459,0x040A,0x045A,
            0x0458,0x0405,0x00AC,0x221A,0x0192,0x2248,0x2206,0x00AB,
            0x00BB,0x2026,0x00A0,0x040B,0x045B,0x040C,0x045C,0x0455,
            0x2013,0x2014,0x201C,0x201D,0x2018,0x2019,0x00F7,0x201E,
            0x040E,0x045E,0x040F,0x045F,0x2116,0x0401,0x0451,0x044F,
            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
            0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
            0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x00A4
        )
    );


    // constructor
    public function __construct(){

        // duplicate x- cp866 for convert_cyr_string compatibily
        $this->_recode['d'] = $this->_recode['a'];

    }

    /**
     * function return array of codepages, with what it can work
     * @return array
     */
    public function GetCodepages(){

        return $this->_codepages;

    }


    /**
     * convert string from one codepage to anothe
     * @param $what
     * @param $from
     * @param $to
     * @return string
     */
    public function Convert($what, $from, $to){

        // if input and output is equivalent
        if ($from == $to)
            return $what;

        // if input string is Unicode - use special function
        if ($from == 'u')
            return $this->_utf2str($what, $to);
        elseif ($to == 'u')
            return $this->_str2utf($what, $from);
        elseif (function_exists('iconv')){

            return iconv($this->_codepages[$from], $this->_codepages[$to], $what);

        } else {
            return convert_cyr_string($what, $from, $to);
        }

    }

    /**
     * convert mail header to 7-bit
     * @param $what
     * @param $from
     * @param $to
     * @return string
     */
    public function ConvertHeader($what, $from, $to){

        return '=?'.$this->_codepages[$to].'?B?'.base64_encode($this->Convert($what, $from, $to)).'?=';

    }

    /**
     * method convert any string from $_recode to UTF-8
     * @param $str
     * @param $from
     * @return string
     */
    protected function _str2utf($str, $from) {

        $outstr='';
        $and=0x3F;

        for ($i=0;$i<strlen($str);$i++) {

            $octet=array();
            if (ord($str[$i])<0x80) {
                $strhex=ord($str[$i]);
            } else {
                $strhex=$this->_recode[$from][ord($str[$i])-128];
            }
            if ($strhex<0x0080) {
                $octet[0]=0x0;
            } elseif ($strhex<0x0800) {
                $octet[0]=0xC0;
                $octet[1]=0x80;
            } elseif ($strhex<0x10000) {
                $octet[0]=0xE0;
                $octet[1]=0x80;
                $octet[2]=0x80;
            } elseif ($strhex<0x200000) {
                $octet[0]=0xF0;
                $octet[1]=0x80;
                $octet[2]=0x80;
                $octet[3]=0x80;
            } elseif ($strhex<0x4000000) {
                $octet[0]=0xF8;
                $octet[1]=0x80;
                $octet[2]=0x80;
                $octet[3]=0x80;
                $octet[4]=0x80;
            } else {
                $octet[0]=0xFC;
                $octet[1]=0x80;
                $octet[2]=0x80;
                $octet[3]=0x80;
                $octet[4]=0x80;
                $octet[5]=0x80;
            }
            for ($j=(count($octet)-1);$j>=1;$j--) {
                $octet[$j]=$octet[$j] + ($strhex & $and);
                $strhex=$strhex>>6;
            }
            $octet[0]=$octet[0] + $strhex;
            for ($j=0;$j<count($octet);$j++) {
                $outstr.=chr($octet[$j]);
            }
        }

        return($outstr);
    }


    /**
     * method converts from UTF to any other codepage
     * @param $str
     * @param $to
     * @return string
     */
    protected function _utf2str($str, $to) {

        $outstr='';
        $and=0x3F;

        for ($i=0;$i<strlen($str);$i++) {
            $letter=0x0;
            $octet=array();
            $octet[0]=ord($str[$i]);
            $octets=1;
            $andfirst=0x7F;
            if (($octet[0]>>1)==0x7E) {
                $octets=6;
                $andfirst=0x1;
            } elseif (($octet[0]>>2)==0x3E) {
                $octets=5;
                $andfirst=0x3;
            } elseif (($octet[0]>>3)==0x1E) {
                $octets=4;
                $andfirst=0x7;
            } elseif (($octet[0]>>4)==0xE) {
                $octets=3;
                $andfirst=0xF;
            } elseif (($octet[0]>>5)==0x6) {
                $octets=2;
                $andfirst=0x1F;
            }
            $octet[0]=$octet[0] & $andfirst;
            $octet[0]=$octet[0] << ($octets-1)*6;
            $letter+=$octet[0];
            for ($j=1;$j<$octets;$j++) {
                $i++;
                $octet[$j]=ord($str[$i]) & $and;
                $octet[$j]=$octet[$j] << ($octets-1-$j)*6;
                $letter+=$octet[$j];
            }
            if ($letter<0x80) {
                $outstr.=chr($letter);
            } else {
                if (in_array($letter,$this->_recode[$to])) {
                    $outstr.=chr(array_search($letter,$this->_recode[$to])+128);
                }
            }
        }

        return($outstr);
    }

}
